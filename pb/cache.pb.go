// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/cache.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/cache.proto

It has these top-level messages:
	Empty
	GetRequest
	SetRequest
	FlushKeyRequest
	GetResponse
	GetAllResponse
	Result
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SetRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type FlushKeyRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *FlushKeyRequest) Reset()                    { *m = FlushKeyRequest{} }
func (m *FlushKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushKeyRequest) ProtoMessage()               {}
func (*FlushKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FlushKeyRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Key   []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetAllResponse struct {
	GetResponses []*GetResponse `protobuf:"bytes,1,rep,name=GetResponses" json:"GetResponses,omitempty"`
}

func (m *GetAllResponse) Reset()                    { *m = GetAllResponse{} }
func (m *GetAllResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllResponse) ProtoMessage()               {}
func (*GetAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetAllResponse) GetGetResponses() []*GetResponse {
	if m != nil {
		return m.GetResponses
	}
	return nil
}

type Result struct {
	Result string `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Result) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*SetRequest)(nil), "pb.SetRequest")
	proto.RegisterType((*FlushKeyRequest)(nil), "pb.FlushKeyRequest")
	proto.RegisterType((*GetResponse)(nil), "pb.GetResponse")
	proto.RegisterType((*GetAllResponse)(nil), "pb.GetAllResponse")
	proto.RegisterType((*Result)(nil), "pb.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cache service

type CacheClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Result, error)
	FlushAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error)
	FlushKey(ctx context.Context, in *FlushKeyRequest, opts ...grpc.CallOption) (*Result, error)
	Listener(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cache_ListenerClient, error)
}

type cacheClient struct {
	cc *grpc.ClientConn
}

func NewCacheClient(cc *grpc.ClientConn) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/pb.Cache/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := grpc.Invoke(ctx, "/pb.Cache/GetAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/pb.Cache/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) FlushAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/pb.Cache/FlushAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) FlushKey(ctx context.Context, in *FlushKeyRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/pb.Cache/FlushKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Listener(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cache_ListenerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cache_serviceDesc.Streams[0], c.cc, "/pb.Cache/Listener", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_ListenerClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type cacheListenerClient struct {
	grpc.ClientStream
}

func (x *cacheListenerClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Cache service

type CacheServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	GetAll(context.Context, *Empty) (*GetAllResponse, error)
	Set(context.Context, *SetRequest) (*Result, error)
	FlushAll(context.Context, *Empty) (*Result, error)
	FlushKey(context.Context, *FlushKeyRequest) (*Result, error)
	Listener(*Empty, Cache_ListenerServer) error
}

func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_FlushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).FlushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/FlushAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).FlushAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_FlushKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).FlushKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Cache/FlushKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).FlushKey(ctx, req.(*FlushKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Listener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).Listener(m, &cacheListenerServer{stream})
}

type Cache_ListenerServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type cacheListenerServer struct {
	grpc.ServerStream
}

func (x *cacheListenerServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Cache_GetAll_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Cache_Set_Handler,
		},
		{
			MethodName: "FlushAll",
			Handler:    _Cache_FlushAll_Handler,
		},
		{
			MethodName: "FlushKey",
			Handler:    _Cache_FlushKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listener",
			Handler:       _Cache_Listener_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/cache.proto",
}

func init() { proto.RegisterFile("pb/cache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x9b, 0x86, 0xc6, 0x76, 0x5a, 0x52, 0x19, 0x45, 0x42, 0x0e, 0x12, 0xb6, 0x08, 0xf1,
	0x60, 0x94, 0x56, 0x3f, 0x80, 0x48, 0xcd, 0xa1, 0x9e, 0xb6, 0xe0, 0xbd, 0x29, 0x03, 0x15, 0xd6,
	0x66, 0xed, 0x6e, 0x0e, 0xf9, 0xee, 0x1e, 0x64, 0x37, 0x69, 0x4d, 0x03, 0x15, 0x6f, 0xf3, 0xe7,
	0xe5, 0x37, 0x2f, 0x8f, 0x05, 0x5f, 0x66, 0xf7, 0xeb, 0xd5, 0x7a, 0x43, 0x89, 0xdc, 0xe5, 0x3a,
	0xc7, 0xae, 0xcc, 0xd8, 0x19, 0xf4, 0xe6, 0x9f, 0x52, 0x97, 0xec, 0x1a, 0x20, 0x25, 0xcd, 0xe9,
	0xab, 0x20, 0xa5, 0xf1, 0x1c, 0xdc, 0x05, 0x95, 0x81, 0x13, 0x39, 0xf1, 0x88, 0x9b, 0x92, 0x3d,
	0x02, 0x2c, 0xff, 0xd8, 0xe3, 0x25, 0xf4, 0xde, 0x57, 0xa2, 0xa0, 0xa0, 0x6b, 0x67, 0x55, 0xc3,
	0x26, 0x30, 0x7e, 0x15, 0x85, 0xda, 0x2c, 0xa8, 0x3c, 0x8d, 0x7e, 0x82, 0xa1, 0x3d, 0xad, 0x64,
	0xbe, 0x55, 0xf4, 0x6f, 0xf6, 0x1c, 0xfc, 0x94, 0xf4, 0xb3, 0x10, 0x87, 0x2f, 0x67, 0x30, 0x6a,
	0x80, 0x54, 0xe0, 0x44, 0x6e, 0x3c, 0x9c, 0x8e, 0x13, 0x99, 0x25, 0x8d, 0x39, 0x3f, 0x12, 0xb1,
	0x08, 0x3c, 0x4e, 0xaa, 0x10, 0x1a, 0xaf, 0xf6, 0x95, 0xbd, 0x3d, 0xe0, 0x75, 0x37, 0xfd, 0x76,
	0xa0, 0xf7, 0x62, 0x72, 0xc3, 0x18, 0xdc, 0x94, 0x34, 0xfa, 0x07, 0xa2, 0xfd, 0xa5, 0xb0, 0x7d,
	0x81, 0x75, 0xf0, 0x16, 0xbc, 0xca, 0x1c, 0x0e, 0xcc, 0xd2, 0x66, 0x1c, 0x62, 0xad, 0x6b, 0x78,
	0x66, 0x1d, 0x9c, 0x80, 0xbb, 0xdc, 0x43, 0x7f, 0x23, 0x0e, 0xc1, 0xf4, 0x95, 0x03, 0x2b, 0xea,
	0xdb, 0x20, 0x5b, 0xc4, 0x63, 0xd1, 0x5d, 0x2d, 0x32, 0x99, 0x5d, 0x98, 0x4d, 0x2b, 0xfb, 0x96,
	0xfc, 0x06, 0xfa, 0x6f, 0x1f, 0x4a, 0xd3, 0x96, 0x76, 0x27, 0x99, 0x0f, 0x4e, 0xe6, 0xd9, 0xd7,
	0x32, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x50, 0x30, 0xc9, 0x3f, 0x02, 0x00, 0x00,
}
